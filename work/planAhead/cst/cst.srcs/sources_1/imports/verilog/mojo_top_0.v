/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [2:0] src,
    input sum,
    input carry,
    input center,
    output reg [7:0] io_led
  );
  
  
  
  reg rst;
  
  reg error;
  
  reg [15:0] correct_outputs;
  
  reg [1:0] out;
  
  integer currentInput;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam MANUAL_state = 2'd0;
  localparam AUTO_state = 2'd1;
  localparam ERROR_state = 2'd2;
  
  reg [1:0] M_state_d, M_state_q = MANUAL_state;
  
  wire [3-1:0] M_myCounter_out;
  counter_2 myCounter (
    .clk(clk),
    .rst(center || rst),
    .out(M_myCounter_out)
  );
  
  wire [1-1:0] M_errorBlinker_out;
  counter_3 errorBlinker (
    .clk(clk),
    .rst(center || rst),
    .out(M_errorBlinker_out)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    correct_outputs = 16'he994;
    out = {carry, sum};
    src = 1'h0;
    led = 1'h0;
    io_led = 1'h0;
    
    case (M_state_q)
      MANUAL_state: begin
        src = 3'h0;
        currentInput = 3'h0;
        led = 8'hff;
        io_led = 8'hff;
        if (center) begin
          M_state_d = AUTO_state;
        end
      end
      AUTO_state: begin
        error = out != correct_outputs[(currentInput)*2+1-:2];
        src = M_myCounter_out;
        currentInput = {M_myCounter_out};
        led = {currentInput, 1'h0, out, 1'h0, !error};
        io_led = {currentInput, 1'h0, out, 1'h0, !error};
        if (M_errorBlinker_out && error) begin
          
        end
        if (center) begin
          M_state_d = MANUAL_state;
        end
      end
      ERROR_state: begin
        error = M_errorBlinker_out;
        led = {currentInput, 1'h0, out, 1'h0, error};
        io_led = {currentInput, 1'h0, out, 1'h0, error};
        src = currentInput;
        if (center) begin
          M_state_d = MANUAL_state;
        end
      end
    endcase
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
